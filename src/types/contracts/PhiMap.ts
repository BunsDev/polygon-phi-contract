/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace PhiMap {
  export type DepositInfoStruct = {
    contractAddress: string;
    tokenId: BigNumberish;
    amount: BigNumberish;
    used: BigNumberish;
  };

  export type DepositInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    contractAddress: string;
    tokenId: BigNumber;
    amount: BigNumber;
    used: BigNumber;
  };

  export type BasePlateStruct = {
    contractAddress: string;
    tokenId: BigNumberish;
  };

  export type BasePlateStructOutput = [string, BigNumber] & {
    contractAddress: string;
    tokenId: BigNumber;
  };

  export type WallPaperStruct = {
    contractAddress: string;
    tokenId: BigNumberish;
  };

  export type WallPaperStructOutput = [string, BigNumber] & {
    contractAddress: string;
    tokenId: BigNumber;
  };

  export type ObjectStruct = {
    contractAddress: string;
    tokenId: BigNumberish;
    xStart: BigNumberish;
    yStart: BigNumberish;
  };

  export type ObjectStructOutput = [string, BigNumber, number, number] & {
    contractAddress: string;
    tokenId: BigNumber;
    xStart: number;
    yStart: number;
  };

  export type LinkStruct = { title: string; url: string; data: BigNumberish };

  export type LinkStructOutput = [string, string, BigNumber] & {
    title: string;
    url: string;
    data: BigNumber;
  };

  export type ObjectInfoStruct = {
    contractAddress: string;
    tokenId: BigNumberish;
    xStart: BigNumberish;
    yStart: BigNumberish;
    xEnd: BigNumberish;
    yEnd: BigNumberish;
    link: PhiMap.LinkStruct;
  };

  export type ObjectInfoStructOutput = [
    string,
    BigNumber,
    number,
    number,
    number,
    number,
    PhiMap.LinkStructOutput
  ] & {
    contractAddress: string;
    tokenId: BigNumber;
    xStart: number;
    yStart: number;
    xEnd: number;
    yEnd: number;
    link: PhiMap.LinkStructOutput;
  };
}

export interface PhiMapInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "basePlate(string)": FunctionFragment;
    "batchDepositObject(string,address[],uint256[],uint256[])": FunctionFragment;
    "batchDepositObjectFromShop(string,address,address[],uint256[],uint256[])": FunctionFragment;
    "batchWithdrawObject(string,address[],uint256[],uint256[])": FunctionFragment;
    "changePhilandOwner(string,address)": FunctionFragment;
    "checkAllDepositStatus(string)": FunctionFragment;
    "checkBasePlate(string)": FunctionFragment;
    "checkDepositStatus(string,address,uint256)": FunctionFragment;
    "checkWallPaper(string)": FunctionFragment;
    "create(string,address)": FunctionFragment;
    "depositInfo(string,address,uint256)": FunctionFragment;
    "flipLockMap()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isMapLocked()": FunctionFragment;
    "mapInitialization(string)": FunctionFragment;
    "mapSettings()": FunctionFragment;
    "numberOfLand()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "ownerLists(string)": FunctionFragment;
    "ownerOfPhiland(string)": FunctionFragment;
    "removehitelistObject(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "save(string,uint256[],(address,uint256,uint8,uint8)[],(string,string,uint256)[],address,uint256,address,uint256)": FunctionFragment;
    "setWhitelistObject(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "userObject(string,uint256)": FunctionFragment;
    "userObjectDeposit(string,uint256)": FunctionFragment;
    "viewLinks(string)": FunctionFragment;
    "viewObjectLink(string,uint256)": FunctionFragment;
    "viewPhiland(string)": FunctionFragment;
    "viewPhilandArray(string)": FunctionFragment;
    "wallPaper(string)": FunctionFragment;
    "writeObjectToLand(string,(address,uint256,uint8,uint8),(string,string,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "basePlate"
      | "batchDepositObject"
      | "batchDepositObjectFromShop"
      | "batchWithdrawObject"
      | "changePhilandOwner"
      | "checkAllDepositStatus"
      | "checkBasePlate"
      | "checkDepositStatus"
      | "checkWallPaper"
      | "create"
      | "depositInfo"
      | "flipLockMap"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isMapLocked"
      | "mapInitialization"
      | "mapSettings"
      | "numberOfLand"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "ownerLists"
      | "ownerOfPhiland"
      | "removehitelistObject"
      | "renounceRole"
      | "revokeRole"
      | "save"
      | "setWhitelistObject"
      | "supportsInterface"
      | "userObject"
      | "userObjectDeposit"
      | "viewLinks"
      | "viewObjectLink"
      | "viewPhiland"
      | "viewPhilandArray"
      | "wallPaper"
      | "writeObjectToLand"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "basePlate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchDepositObject",
    values: [string, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDepositObjectFromShop",
    values: [string, string, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdrawObject",
    values: [string, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changePhilandOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllDepositStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBasePlate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDepositStatus",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkWallPaper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInfo",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flipLockMap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isMapLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mapInitialization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mapSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfLand",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "ownerLists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerOfPhiland",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removehitelistObject",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "save",
    values: [
      string,
      BigNumberish[],
      PhiMap.ObjectStruct[],
      PhiMap.LinkStruct[],
      string,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistObject",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userObject",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userObjectDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "viewLinks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "viewObjectLink",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "viewPhiland", values: [string]): string;
  encodeFunctionData(
    functionFragment: "viewPhilandArray",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wallPaper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "writeObjectToLand",
    values: [string, PhiMap.ObjectStruct, PhiMap.LinkStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "basePlate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchDepositObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDepositObjectFromShop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdrawObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePhilandOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllDepositStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBasePlate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDepositStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkWallPaper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flipLockMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMapLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mapInitialization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mapSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerLists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfPhiland",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removehitelistObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "save", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userObject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userObjectDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewLinks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewObjectLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPhiland",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPhilandArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallPaper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "writeObjectToLand",
    data: BytesLike
  ): Result;

  events: {
    "ChangeBasePlate(string,address,uint256)": EventFragment;
    "ChangePhilandOwner(string,address)": EventFragment;
    "ChangeWallPaper(string,address,uint256)": EventFragment;
    "CreatedMap(string,address,uint256)": EventFragment;
    "DepositSuccess(address,string,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MapInitialization(string,address)": EventFragment;
    "MapLockStatusChange()": EventFragment;
    "RemoveLink(string,uint256)": EventFragment;
    "RemoveObject(string,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Save(string,address)": EventFragment;
    "WhitelistGranted(address,address)": EventFragment;
    "WhitelistRemoved(address,address)": EventFragment;
    "WithdrawSuccess(address,string,address,uint256,uint256)": EventFragment;
    "WriteLink(string,address,uint256,string,string,uint256)": EventFragment;
    "WriteObject(string,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeBasePlate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePhilandOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeWallPaper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedMap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MapInitialization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MapLockStatusChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveObject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Save"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WriteLink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WriteObject"): EventFragment;
}

export interface ChangeBasePlateEventObject {
  name: string;
  contractAddress: string;
  tokenId: BigNumber;
}
export type ChangeBasePlateEvent = TypedEvent<
  [string, string, BigNumber],
  ChangeBasePlateEventObject
>;

export type ChangeBasePlateEventFilter = TypedEventFilter<ChangeBasePlateEvent>;

export interface ChangePhilandOwnerEventObject {
  name: string;
  sender: string;
}
export type ChangePhilandOwnerEvent = TypedEvent<
  [string, string],
  ChangePhilandOwnerEventObject
>;

export type ChangePhilandOwnerEventFilter =
  TypedEventFilter<ChangePhilandOwnerEvent>;

export interface ChangeWallPaperEventObject {
  name: string;
  contractAddress: string;
  tokenId: BigNumber;
}
export type ChangeWallPaperEvent = TypedEvent<
  [string, string, BigNumber],
  ChangeWallPaperEventObject
>;

export type ChangeWallPaperEventFilter = TypedEventFilter<ChangeWallPaperEvent>;

export interface CreatedMapEventObject {
  name: string;
  sender: string;
  numberOfLand: BigNumber;
}
export type CreatedMapEvent = TypedEvent<
  [string, string, BigNumber],
  CreatedMapEventObject
>;

export type CreatedMapEventFilter = TypedEventFilter<CreatedMapEvent>;

export interface DepositSuccessEventObject {
  sender: string;
  name: string;
  contractAddress: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type DepositSuccessEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  DepositSuccessEventObject
>;

export type DepositSuccessEventFilter = TypedEventFilter<DepositSuccessEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MapInitializationEventObject {
  iname: string;
  sender: string;
}
export type MapInitializationEvent = TypedEvent<
  [string, string],
  MapInitializationEventObject
>;

export type MapInitializationEventFilter =
  TypedEventFilter<MapInitializationEvent>;

export interface MapLockStatusChangeEventObject {}
export type MapLockStatusChangeEvent = TypedEvent<
  [],
  MapLockStatusChangeEventObject
>;

export type MapLockStatusChangeEventFilter =
  TypedEventFilter<MapLockStatusChangeEvent>;

export interface RemoveLinkEventObject {
  name: string;
  index: BigNumber;
}
export type RemoveLinkEvent = TypedEvent<
  [string, BigNumber],
  RemoveLinkEventObject
>;

export type RemoveLinkEventFilter = TypedEventFilter<RemoveLinkEvent>;

export interface RemoveObjectEventObject {
  name: string;
  index: BigNumber;
}
export type RemoveObjectEvent = TypedEvent<
  [string, BigNumber],
  RemoveObjectEventObject
>;

export type RemoveObjectEventFilter = TypedEventFilter<RemoveObjectEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SaveEventObject {
  name: string;
  sender: string;
}
export type SaveEvent = TypedEvent<[string, string], SaveEventObject>;

export type SaveEventFilter = TypedEventFilter<SaveEvent>;

export interface WhitelistGrantedEventObject {
  operator: string;
  target: string;
}
export type WhitelistGrantedEvent = TypedEvent<
  [string, string],
  WhitelistGrantedEventObject
>;

export type WhitelistGrantedEventFilter =
  TypedEventFilter<WhitelistGrantedEvent>;

export interface WhitelistRemovedEventObject {
  operator: string;
  target: string;
}
export type WhitelistRemovedEvent = TypedEvent<
  [string, string],
  WhitelistRemovedEventObject
>;

export type WhitelistRemovedEventFilter =
  TypedEventFilter<WhitelistRemovedEvent>;

export interface WithdrawSuccessEventObject {
  sender: string;
  name: string;
  contractAddress: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type WithdrawSuccessEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawSuccessEventObject
>;

export type WithdrawSuccessEventFilter = TypedEventFilter<WithdrawSuccessEvent>;

export interface WriteLinkEventObject {
  name: string;
  contractAddress: string;
  tokenId: BigNumber;
  title: string;
  url: string;
  data: BigNumber;
}
export type WriteLinkEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  WriteLinkEventObject
>;

export type WriteLinkEventFilter = TypedEventFilter<WriteLinkEvent>;

export interface WriteObjectEventObject {
  name: string;
  contractAddress: string;
  tokenId: BigNumber;
  xStart: BigNumber;
  yStart: BigNumber;
}
export type WriteObjectEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  WriteObjectEventObject
>;

export type WriteObjectEventFilter = TypedEventFilter<WriteObjectEvent>;

export interface PhiMap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PhiMapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    basePlate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
    >;

    batchDepositObject(
      name: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchDepositObjectFromShop(
      name: string,
      msgSender: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchWithdrawObject(
      name: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePhilandOwner(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkAllDepositStatus(
      name: string,
      overrides?: CallOverrides
    ): Promise<[PhiMap.DepositInfoStructOutput[]]>;

    checkBasePlate(
      name: string,
      overrides?: CallOverrides
    ): Promise<[PhiMap.BasePlateStructOutput]>;

    checkDepositStatus(
      name: string,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PhiMap.DepositInfoStructOutput]>;

    checkWallPaper(
      name: string,
      overrides?: CallOverrides
    ): Promise<[PhiMap.WallPaperStructOutput]>;

    create(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        contractAddress: string;
        tokenId: BigNumber;
        amount: BigNumber;
        used: BigNumber;
      }
    >;

    flipLockMap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isMapLocked(overrides?: CallOverrides): Promise<[boolean]>;

    mapInitialization(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mapSettings(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        minX: number;
        maxX: number;
        minY: number;
        maxY: number;
      }
    >;

    numberOfLand(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerLists(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    ownerOfPhiland(name: string, overrides?: CallOverrides): Promise<[string]>;

    removehitelistObject(
      oldObject: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    save(
      name: string,
      removeIndexArray: BigNumberish[],
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      wcontractAddress: string,
      wtokenId: BigNumberish,
      bcontractAddress: string,
      btokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistObject(
      newObject: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userObject(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        number,
        number,
        number,
        number,
        PhiMap.LinkStructOutput
      ] & {
        contractAddress: string;
        tokenId: BigNumber;
        xStart: number;
        yStart: number;
        xEnd: number;
        yEnd: number;
        link: PhiMap.LinkStructOutput;
      }
    >;

    userObjectDeposit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
    >;

    viewLinks(
      name: string,
      overrides?: CallOverrides
    ): Promise<[PhiMap.LinkStructOutput[]]>;

    viewObjectLink(
      name: string,
      objectIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PhiMap.LinkStructOutput]>;

    viewPhiland(
      name: string,
      overrides?: CallOverrides
    ): Promise<[PhiMap.ObjectInfoStructOutput[]]>;

    viewPhilandArray(
      name: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    wallPaper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
    >;

    writeObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct,
      link: PhiMap.LinkStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  basePlate(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
  >;

  batchDepositObject(
    name: string,
    contractAddresses: string[],
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchDepositObjectFromShop(
    name: string,
    msgSender: string,
    contractAddresses: string[],
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchWithdrawObject(
    name: string,
    contractAddresses: string[],
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePhilandOwner(
    name: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkAllDepositStatus(
    name: string,
    overrides?: CallOverrides
  ): Promise<PhiMap.DepositInfoStructOutput[]>;

  checkBasePlate(
    name: string,
    overrides?: CallOverrides
  ): Promise<PhiMap.BasePlateStructOutput>;

  checkDepositStatus(
    name: string,
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PhiMap.DepositInfoStructOutput>;

  checkWallPaper(
    name: string,
    overrides?: CallOverrides
  ): Promise<PhiMap.WallPaperStructOutput>;

  create(
    name: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositInfo(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      contractAddress: string;
      tokenId: BigNumber;
      amount: BigNumber;
      used: BigNumber;
    }
  >;

  flipLockMap(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isMapLocked(overrides?: CallOverrides): Promise<boolean>;

  mapInitialization(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mapSettings(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      minX: number;
      maxX: number;
      minY: number;
      maxY: number;
    }
  >;

  numberOfLand(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerLists(arg0: string, overrides?: CallOverrides): Promise<string>;

  ownerOfPhiland(name: string, overrides?: CallOverrides): Promise<string>;

  removehitelistObject(
    oldObject: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  save(
    name: string,
    removeIndexArray: BigNumberish[],
    objectDatas: PhiMap.ObjectStruct[],
    links: PhiMap.LinkStruct[],
    wcontractAddress: string,
    wtokenId: BigNumberish,
    bcontractAddress: string,
    btokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistObject(
    newObject: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userObject(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      number,
      number,
      number,
      number,
      PhiMap.LinkStructOutput
    ] & {
      contractAddress: string;
      tokenId: BigNumber;
      xStart: number;
      yStart: number;
      xEnd: number;
      yEnd: number;
      link: PhiMap.LinkStructOutput;
    }
  >;

  userObjectDeposit(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
  >;

  viewLinks(
    name: string,
    overrides?: CallOverrides
  ): Promise<PhiMap.LinkStructOutput[]>;

  viewObjectLink(
    name: string,
    objectIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PhiMap.LinkStructOutput>;

  viewPhiland(
    name: string,
    overrides?: CallOverrides
  ): Promise<PhiMap.ObjectInfoStructOutput[]>;

  viewPhilandArray(
    name: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  wallPaper(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
  >;

  writeObjectToLand(
    name: string,
    objectData: PhiMap.ObjectStruct,
    link: PhiMap.LinkStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    basePlate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
    >;

    batchDepositObject(
      name: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchDepositObjectFromShop(
      name: string,
      msgSender: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchWithdrawObject(
      name: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    changePhilandOwner(
      name: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkAllDepositStatus(
      name: string,
      overrides?: CallOverrides
    ): Promise<PhiMap.DepositInfoStructOutput[]>;

    checkBasePlate(
      name: string,
      overrides?: CallOverrides
    ): Promise<PhiMap.BasePlateStructOutput>;

    checkDepositStatus(
      name: string,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PhiMap.DepositInfoStructOutput>;

    checkWallPaper(
      name: string,
      overrides?: CallOverrides
    ): Promise<PhiMap.WallPaperStructOutput>;

    create(
      name: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        contractAddress: string;
        tokenId: BigNumber;
        amount: BigNumber;
        used: BigNumber;
      }
    >;

    flipLockMap(overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(admin: string, overrides?: CallOverrides): Promise<void>;

    isMapLocked(overrides?: CallOverrides): Promise<boolean>;

    mapInitialization(name: string, overrides?: CallOverrides): Promise<void>;

    mapSettings(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        minX: number;
        maxX: number;
        minY: number;
        maxY: number;
      }
    >;

    numberOfLand(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerLists(arg0: string, overrides?: CallOverrides): Promise<string>;

    ownerOfPhiland(name: string, overrides?: CallOverrides): Promise<string>;

    removehitelistObject(
      oldObject: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    save(
      name: string,
      removeIndexArray: BigNumberish[],
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      wcontractAddress: string,
      wtokenId: BigNumberish,
      bcontractAddress: string,
      btokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistObject(
      newObject: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userObject(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        number,
        number,
        number,
        number,
        PhiMap.LinkStructOutput
      ] & {
        contractAddress: string;
        tokenId: BigNumber;
        xStart: number;
        yStart: number;
        xEnd: number;
        yEnd: number;
        link: PhiMap.LinkStructOutput;
      }
    >;

    userObjectDeposit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
    >;

    viewLinks(
      name: string,
      overrides?: CallOverrides
    ): Promise<PhiMap.LinkStructOutput[]>;

    viewObjectLink(
      name: string,
      objectIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PhiMap.LinkStructOutput>;

    viewPhiland(
      name: string,
      overrides?: CallOverrides
    ): Promise<PhiMap.ObjectInfoStructOutput[]>;

    viewPhilandArray(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    wallPaper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
    >;

    writeObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct,
      link: PhiMap.LinkStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeBasePlate(string,address,uint256)"(
      name?: null,
      contractAddress?: null,
      tokenId?: null
    ): ChangeBasePlateEventFilter;
    ChangeBasePlate(
      name?: null,
      contractAddress?: null,
      tokenId?: null
    ): ChangeBasePlateEventFilter;

    "ChangePhilandOwner(string,address)"(
      name?: null,
      sender?: string | null
    ): ChangePhilandOwnerEventFilter;
    ChangePhilandOwner(
      name?: null,
      sender?: string | null
    ): ChangePhilandOwnerEventFilter;

    "ChangeWallPaper(string,address,uint256)"(
      name?: null,
      contractAddress?: null,
      tokenId?: null
    ): ChangeWallPaperEventFilter;
    ChangeWallPaper(
      name?: null,
      contractAddress?: null,
      tokenId?: null
    ): ChangeWallPaperEventFilter;

    "CreatedMap(string,address,uint256)"(
      name?: null,
      sender?: string | null,
      numberOfLand?: null
    ): CreatedMapEventFilter;
    CreatedMap(
      name?: null,
      sender?: string | null,
      numberOfLand?: null
    ): CreatedMapEventFilter;

    "DepositSuccess(address,string,address,uint256,uint256)"(
      sender?: string | null,
      name?: null,
      contractAddress?: null,
      tokenId?: null,
      amount?: null
    ): DepositSuccessEventFilter;
    DepositSuccess(
      sender?: string | null,
      name?: null,
      contractAddress?: null,
      tokenId?: null,
      amount?: null
    ): DepositSuccessEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MapInitialization(string,address)"(
      iname?: null,
      sender?: string | null
    ): MapInitializationEventFilter;
    MapInitialization(
      iname?: null,
      sender?: string | null
    ): MapInitializationEventFilter;

    "MapLockStatusChange()"(): MapLockStatusChangeEventFilter;
    MapLockStatusChange(): MapLockStatusChangeEventFilter;

    "RemoveLink(string,uint256)"(
      name?: null,
      index?: null
    ): RemoveLinkEventFilter;
    RemoveLink(name?: null, index?: null): RemoveLinkEventFilter;

    "RemoveObject(string,uint256)"(
      name?: null,
      index?: null
    ): RemoveObjectEventFilter;
    RemoveObject(name?: null, index?: null): RemoveObjectEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Save(string,address)"(
      name?: null,
      sender?: string | null
    ): SaveEventFilter;
    Save(name?: null, sender?: string | null): SaveEventFilter;

    "WhitelistGranted(address,address)"(
      operator?: string | null,
      target?: string | null
    ): WhitelistGrantedEventFilter;
    WhitelistGranted(
      operator?: string | null,
      target?: string | null
    ): WhitelistGrantedEventFilter;

    "WhitelistRemoved(address,address)"(
      operator?: string | null,
      target?: string | null
    ): WhitelistRemovedEventFilter;
    WhitelistRemoved(
      operator?: string | null,
      target?: string | null
    ): WhitelistRemovedEventFilter;

    "WithdrawSuccess(address,string,address,uint256,uint256)"(
      sender?: string | null,
      name?: null,
      contractAddress?: null,
      tokenId?: null,
      amount?: null
    ): WithdrawSuccessEventFilter;
    WithdrawSuccess(
      sender?: string | null,
      name?: null,
      contractAddress?: null,
      tokenId?: null,
      amount?: null
    ): WithdrawSuccessEventFilter;

    "WriteLink(string,address,uint256,string,string,uint256)"(
      name?: null,
      contractAddress?: null,
      tokenId?: null,
      title?: null,
      url?: null,
      data?: null
    ): WriteLinkEventFilter;
    WriteLink(
      name?: null,
      contractAddress?: null,
      tokenId?: null,
      title?: null,
      url?: null,
      data?: null
    ): WriteLinkEventFilter;

    "WriteObject(string,address,uint256,uint256,uint256)"(
      name?: null,
      contractAddress?: null,
      tokenId?: null,
      xStart?: null,
      yStart?: null
    ): WriteObjectEventFilter;
    WriteObject(
      name?: null,
      contractAddress?: null,
      tokenId?: null,
      xStart?: null,
      yStart?: null
    ): WriteObjectEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    basePlate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchDepositObject(
      name: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchDepositObjectFromShop(
      name: string,
      msgSender: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchWithdrawObject(
      name: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePhilandOwner(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkAllDepositStatus(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkBasePlate(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkDepositStatus(
      name: string,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkWallPaper(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    create(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flipLockMap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isMapLocked(overrides?: CallOverrides): Promise<BigNumber>;

    mapInitialization(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mapSettings(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfLand(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerLists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOfPhiland(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    removehitelistObject(
      oldObject: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    save(
      name: string,
      removeIndexArray: BigNumberish[],
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      wcontractAddress: string,
      wtokenId: BigNumberish,
      bcontractAddress: string,
      btokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistObject(
      newObject: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userObject(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userObjectDeposit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewLinks(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    viewObjectLink(
      name: string,
      objectIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewPhiland(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    viewPhilandArray(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wallPaper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    writeObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct,
      link: PhiMap.LinkStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    basePlate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchDepositObject(
      name: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchDepositObjectFromShop(
      name: string,
      msgSender: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchWithdrawObject(
      name: string,
      contractAddresses: string[],
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePhilandOwner(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkAllDepositStatus(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkBasePlate(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkDepositStatus(
      name: string,
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkWallPaper(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flipLockMap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isMapLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mapInitialization(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mapSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfLand(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerLists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOfPhiland(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removehitelistObject(
      oldObject: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    save(
      name: string,
      removeIndexArray: BigNumberish[],
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      wcontractAddress: string,
      wtokenId: BigNumberish,
      bcontractAddress: string,
      btokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistObject(
      newObject: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userObject(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userObjectDeposit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewLinks(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewObjectLink(
      name: string,
      objectIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewPhiland(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewPhilandArray(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wallPaper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct,
      link: PhiMap.LinkStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
